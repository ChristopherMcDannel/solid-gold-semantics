/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateFineTuneRequest} from '../model/CreateFineTuneRequest';
import {FineTune} from '../model/FineTune';
import {ListFineTuneEventsResponse} from '../model/ListFineTuneEventsResponse';
import {ListFineTunesResponse} from '../model/ListFineTunesResponse';

/**
* FineTunes service.
* @module api/FineTunesApi
* @version 2.0.0
*/
export class FineTunesApi {

    /**
    * Constructs a new FineTunesApi. 
    * @alias module:api/FineTunesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelFineTune operation.
     * @callback moduleapi/FineTunesApi~cancelFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately cancel a fine-tune job. 
     * @param {String} fineTuneId The ID of the fine-tune job to cancel 
     * @param {module:api/FineTunesApi~cancelFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelFineTune(fineTuneId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling cancelFineTune");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FineTune;

      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createFineTune operation.
     * @callback moduleapi/FineTunesApi~createFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
     * @param {module:model/CreateFineTuneRequest} body 
     * @param {module:api/FineTunesApi~createFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createFineTune(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFineTune");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FineTune;

      return this.apiClient.callApi(
        '/fine-tunes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listFineTuneEvents operation.
     * @callback moduleapi/FineTunesApi~listFineTuneEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFineTuneEventsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fine-grained status updates for a fine-tune job. 
     * @param {String} fineTuneId The ID of the fine-tune job to get events for. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (default to <.>)
     * @param {module:api/FineTunesApi~listFineTuneEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listFineTuneEvents(fineTuneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling listFineTuneEvents");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
        'stream': opts['stream']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFineTuneEventsResponse;

      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listFineTunes operation.
     * @callback moduleapi/FineTunesApi~listFineTunesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFineTunesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your organization&#x27;s fine-tuning jobs 
     * @param {module:api/FineTunesApi~listFineTunesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listFineTunes(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFineTunesResponse;

      return this.apiClient.callApi(
        '/fine-tunes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the retrieveFineTune operation.
     * @callback moduleapi/FineTunesApi~retrieveFineTuneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FineTune{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
     * @param {String} fineTuneId The ID of the fine-tune job 
     * @param {module:api/FineTunesApi~retrieveFineTuneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    retrieveFineTune(fineTuneId, callback) {
      
      let postBody = null;
      // verify the required parameter 'fineTuneId' is set
      if (fineTuneId === undefined || fineTuneId === null) {
        throw new Error("Missing the required parameter 'fineTuneId' when calling retrieveFineTune");
      }

      let pathParams = {
        'fine_tune_id': fineTuneId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FineTune;

      return this.apiClient.callApi(
        '/fine-tunes/{fine_tune_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}