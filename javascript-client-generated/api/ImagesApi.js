/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateImageRequest} from '../model/CreateImageRequest';
import {ImagesResponse} from '../model/ImagesResponse';

/**
* Images service.
* @module api/ImagesApi
* @version 2.0.0
*/
export class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createImage operation.
     * @callback moduleapi/ImagesApi~createImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image given a prompt.
     * @param {module:model/CreateImageRequest} body 
     * @param {module:api/ImagesApi~createImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createImage(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;

      return this.apiClient.callApi(
        '/images/generations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createImageEdit operation.
     * @callback moduleapi/ImagesApi~createImageEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * @param {Blob} image 
     * @param {String} prompt 
     * @param {Blob} mask 
     * @param {Object} model 
     * @param {Number} n 
     * @param {module:model/String} size 
     * @param {module:model/String} responseFormat 
     * @param {String} user 
     * @param {module:api/ImagesApi~createImageEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createImageEdit(image, prompt, mask, model, n, size, responseFormat, user, callback) {
      
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageEdit");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling createImageEdit");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling createImageEdit");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createImageEdit");
      }
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling createImageEdit");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling createImageEdit");
      }
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling createImageEdit");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createImageEdit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'image': image,'prompt': prompt,'mask': mask,'model': model,'n': n,'size': size,'response_format': responseFormat,'user': user
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;

      return this.apiClient.callApi(
        '/images/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createImageVariation operation.
     * @callback moduleapi/ImagesApi~createImageVariationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a variation of a given image.
     * @param {Blob} image 
     * @param {Object} model 
     * @param {Number} n 
     * @param {module:model/String} responseFormat 
     * @param {module:model/String} size 
     * @param {String} user 
     * @param {module:api/ImagesApi~createImageVariationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createImageVariation(image, model, n, responseFormat, size, user, callback) {
      
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createImageVariation");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createImageVariation");
      }
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling createImageVariation");
      }
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling createImageVariation");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling createImageVariation");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createImageVariation");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'image': image,'model': model,'n': n,'response_format': responseFormat,'size': size,'user': user
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagesResponse;

      return this.apiClient.callApi(
        '/images/variations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}