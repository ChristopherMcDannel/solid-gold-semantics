/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenAiApi.AssistantsApi();
  });

  describe('(package)', function() {
    describe('AssistantsApi', function() {
      describe('cancelRun', function() {
        it('should call cancelRun successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelRun call and complete the assertions
          /*

          instance.cancelRun(threadId, runId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAssistant', function() {
        it('should call createAssistant successfully', function(done) {
          // TODO: uncomment, update parameter values for createAssistant call and complete the assertions
          /*

          instance.createAssistant(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.AssistantObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAssistantFile', function() {
        it('should call createAssistantFile successfully', function(done) {
          // TODO: uncomment, update parameter values for createAssistantFile call and complete the assertions
          /*

          instance.createAssistantFile(body, assistantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.AssistantFileObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMessage', function() {
        it('should call createMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for createMessage call and complete the assertions
          /*

          instance.createMessage(body, threadId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.MessageObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRun', function() {
        it('should call createRun successfully', function(done) {
          // TODO: uncomment, update parameter values for createRun call and complete the assertions
          /*

          instance.createRun(body, threadId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThread', function() {
        it('should call createThread successfully', function(done) {
          // TODO: uncomment, update parameter values for createThread call and complete the assertions
          /*

          instance.createThread(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ThreadObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreadAndRun', function() {
        it('should call createThreadAndRun successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreadAndRun call and complete the assertions
          /*

          instance.createThreadAndRun(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAssistant', function() {
        it('should call deleteAssistant successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAssistant call and complete the assertions
          /*

          instance.deleteAssistant(assistantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.DeleteAssistantResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAssistantFile', function() {
        it('should call deleteAssistantFile successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAssistantFile call and complete the assertions
          /*

          instance.deleteAssistantFile(assistantId, fileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.DeleteAssistantFileResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThread', function() {
        it('should call deleteThread successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThread call and complete the assertions
          /*

          instance.deleteThread(threadId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.DeleteThreadResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAssistant', function() {
        it('should call getAssistant successfully', function(done) {
          // TODO: uncomment, update parameter values for getAssistant call and complete the assertions
          /*

          instance.getAssistant(assistantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.AssistantObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAssistantFile', function() {
        it('should call getAssistantFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getAssistantFile call and complete the assertions
          /*

          instance.getAssistantFile(assistantId, fileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.AssistantFileObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessage', function() {
        it('should call getMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessage call and complete the assertions
          /*

          instance.getMessage(threadId, messageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.MessageObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessageFile', function() {
        it('should call getMessageFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessageFile call and complete the assertions
          /*

          instance.getMessageFile(threadId, messageId, fileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.MessageFileObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRun', function() {
        it('should call getRun successfully', function(done) {
          // TODO: uncomment, update parameter values for getRun call and complete the assertions
          /*

          instance.getRun(threadId, runId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunStep', function() {
        it('should call getRunStep successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunStep call and complete the assertions
          /*

          instance.getRunStep(threadId, runId, stepId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunStepObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThread', function() {
        it('should call getThread successfully', function(done) {
          // TODO: uncomment, update parameter values for getThread call and complete the assertions
          /*

          instance.getThread(threadId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ThreadObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAssistantFiles', function() {
        it('should call listAssistantFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for listAssistantFiles call and complete the assertions
          /*
          var opts = {};

          instance.listAssistantFiles(assistantId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListAssistantFilesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAssistants', function() {
        it('should call listAssistants successfully', function(done) {
          // TODO: uncomment, update parameter values for listAssistants call and complete the assertions
          /*
          var opts = {};

          instance.listAssistants(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListAssistantsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listMessageFiles', function() {
        it('should call listMessageFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for listMessageFiles call and complete the assertions
          /*
          var opts = {};

          instance.listMessageFiles(threadId, messageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListMessageFilesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listMessages', function() {
        it('should call listMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for listMessages call and complete the assertions
          /*
          var opts = {};

          instance.listMessages(threadId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListMessagesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRunSteps', function() {
        it('should call listRunSteps successfully', function(done) {
          // TODO: uncomment, update parameter values for listRunSteps call and complete the assertions
          /*
          var opts = {};

          instance.listRunSteps(threadId, runId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListRunStepsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRuns', function() {
        it('should call listRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listRuns call and complete the assertions
          /*
          var opts = {};

          instance.listRuns(threadId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ListRunsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyMessage', function() {
        it('should call modifyMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyMessage call and complete the assertions
          /*

          instance.modifyMessage(body, threadId, messageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.MessageObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyRun', function() {
        it('should call modifyRun successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyRun call and complete the assertions
          /*

          instance.modifyRun(body, threadId, runId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyThread', function() {
        it('should call modifyThread successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyThread call and complete the assertions
          /*

          instance.modifyThread(body, threadId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.ThreadObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submitToolOuputsToRun', function() {
        it('should call submitToolOuputsToRun successfully', function(done) {
          // TODO: uncomment, update parameter values for submitToolOuputsToRun call and complete the assertions
          /*

          instance.submitToolOuputsToRun(body, threadId, runId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenAiApi.RunObject);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
