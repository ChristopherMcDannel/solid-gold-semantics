/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FineTune', function() {
      beforeEach(function() {
        instance = new OpenAiApi.FineTune();
      });

      it('should create an instance of FineTune', function() {
        // TODO: update the code to test FineTune
        expect(instance).to.be.a(OpenAiApi.FineTune);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property events (base name: "events")', function() {
        // TODO: update the code to test the property events
        expect(instance).to.have.property('events');
        // expect(instance.events).to.be(expectedValueLiteral);
      });

      it('should have the property fineTunedModel (base name: "fine_tuned_model")', function() {
        // TODO: update the code to test the property fineTunedModel
        expect(instance).to.have.property('fineTunedModel');
        // expect(instance.fineTunedModel).to.be(expectedValueLiteral);
      });

      it('should have the property hyperparams (base name: "hyperparams")', function() {
        // TODO: update the code to test the property hyperparams
        expect(instance).to.have.property('hyperparams');
        // expect(instance.hyperparams).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property _object (base name: "object")', function() {
        // TODO: update the code to test the property _object
        expect(instance).to.have.property('_object');
        // expect(instance._object).to.be(expectedValueLiteral);
      });

      it('should have the property organizationId (base name: "organization_id")', function() {
        // TODO: update the code to test the property organizationId
        expect(instance).to.have.property('organizationId');
        // expect(instance.organizationId).to.be(expectedValueLiteral);
      });

      it('should have the property resultFiles (base name: "result_files")', function() {
        // TODO: update the code to test the property resultFiles
        expect(instance).to.have.property('resultFiles');
        // expect(instance.resultFiles).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property trainingFiles (base name: "training_files")', function() {
        // TODO: update the code to test the property trainingFiles
        expect(instance).to.have.property('trainingFiles');
        // expect(instance.trainingFiles).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property validationFiles (base name: "validation_files")', function() {
        // TODO: update the code to test the property validationFiles
        expect(instance).to.have.property('validationFiles');
        // expect(instance.validationFiles).to.be(expectedValueLiteral);
      });

    });
  });

}));
