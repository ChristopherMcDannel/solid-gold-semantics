/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FineTuneHyperparams', function() {
      beforeEach(function() {
        instance = new OpenAiApi.FineTuneHyperparams();
      });

      it('should create an instance of FineTuneHyperparams', function() {
        // TODO: update the code to test FineTuneHyperparams
        expect(instance).to.be.a(OpenAiApi.FineTuneHyperparams);
      });

      it('should have the property batchSize (base name: "batch_size")', function() {
        // TODO: update the code to test the property batchSize
        expect(instance).to.have.property('batchSize');
        // expect(instance.batchSize).to.be(expectedValueLiteral);
      });

      it('should have the property classificationNClasses (base name: "classification_n_classes")', function() {
        // TODO: update the code to test the property classificationNClasses
        expect(instance).to.have.property('classificationNClasses');
        // expect(instance.classificationNClasses).to.be(expectedValueLiteral);
      });

      it('should have the property classificationPositiveClass (base name: "classification_positive_class")', function() {
        // TODO: update the code to test the property classificationPositiveClass
        expect(instance).to.have.property('classificationPositiveClass');
        // expect(instance.classificationPositiveClass).to.be(expectedValueLiteral);
      });

      it('should have the property computeClassificationMetrics (base name: "compute_classification_metrics")', function() {
        // TODO: update the code to test the property computeClassificationMetrics
        expect(instance).to.have.property('computeClassificationMetrics');
        // expect(instance.computeClassificationMetrics).to.be(expectedValueLiteral);
      });

      it('should have the property learningRateMultiplier (base name: "learning_rate_multiplier")', function() {
        // TODO: update the code to test the property learningRateMultiplier
        expect(instance).to.have.property('learningRateMultiplier');
        // expect(instance.learningRateMultiplier).to.be(expectedValueLiteral);
      });

      it('should have the property nEpochs (base name: "n_epochs")', function() {
        // TODO: update the code to test the property nEpochs
        expect(instance).to.have.property('nEpochs');
        // expect(instance.nEpochs).to.be(expectedValueLiteral);
      });

      it('should have the property promptLossWeight (base name: "prompt_loss_weight")', function() {
        // TODO: update the code to test the property promptLossWeight
        expect(instance).to.have.property('promptLossWeight');
        // expect(instance.promptLossWeight).to.be(expectedValueLiteral);
      });

    });
  });

}));
