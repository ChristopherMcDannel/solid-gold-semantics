/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateCompletionRequest', function() {
      beforeEach(function() {
        instance = new OpenAiApi.CreateCompletionRequest();
      });

      it('should create an instance of CreateCompletionRequest', function() {
        // TODO: update the code to test CreateCompletionRequest
        expect(instance).to.be.a(OpenAiApi.CreateCompletionRequest);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property prompt (base name: "prompt")', function() {
        // TODO: update the code to test the property prompt
        expect(instance).to.have.property('prompt');
        // expect(instance.prompt).to.be(expectedValueLiteral);
      });

      it('should have the property bestOf (base name: "best_of")', function() {
        // TODO: update the code to test the property bestOf
        expect(instance).to.have.property('bestOf');
        // expect(instance.bestOf).to.be(expectedValueLiteral);
      });

      it('should have the property echo (base name: "echo")', function() {
        // TODO: update the code to test the property echo
        expect(instance).to.have.property('echo');
        // expect(instance.echo).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyPenalty (base name: "frequency_penalty")', function() {
        // TODO: update the code to test the property frequencyPenalty
        expect(instance).to.have.property('frequencyPenalty');
        // expect(instance.frequencyPenalty).to.be(expectedValueLiteral);
      });

      it('should have the property logitBias (base name: "logit_bias")', function() {
        // TODO: update the code to test the property logitBias
        expect(instance).to.have.property('logitBias');
        // expect(instance.logitBias).to.be(expectedValueLiteral);
      });

      it('should have the property logprobs (base name: "logprobs")', function() {
        // TODO: update the code to test the property logprobs
        expect(instance).to.have.property('logprobs');
        // expect(instance.logprobs).to.be(expectedValueLiteral);
      });

      it('should have the property maxTokens (base name: "max_tokens")', function() {
        // TODO: update the code to test the property maxTokens
        expect(instance).to.have.property('maxTokens');
        // expect(instance.maxTokens).to.be(expectedValueLiteral);
      });

      it('should have the property n (base name: "n")', function() {
        // TODO: update the code to test the property n
        expect(instance).to.have.property('n');
        // expect(instance.n).to.be(expectedValueLiteral);
      });

      it('should have the property presencePenalty (base name: "presence_penalty")', function() {
        // TODO: update the code to test the property presencePenalty
        expect(instance).to.have.property('presencePenalty');
        // expect(instance.presencePenalty).to.be(expectedValueLiteral);
      });

      it('should have the property seed (base name: "seed")', function() {
        // TODO: update the code to test the property seed
        expect(instance).to.have.property('seed');
        // expect(instance.seed).to.be(expectedValueLiteral);
      });

      it('should have the property stop (base name: "stop")', function() {
        // TODO: update the code to test the property stop
        expect(instance).to.have.property('stop');
        // expect(instance.stop).to.be(expectedValueLiteral);
      });

      it('should have the property stream (base name: "stream")', function() {
        // TODO: update the code to test the property stream
        expect(instance).to.have.property('stream');
        // expect(instance.stream).to.be(expectedValueLiteral);
      });

      it('should have the property suffix (base name: "suffix")', function() {
        // TODO: update the code to test the property suffix
        expect(instance).to.have.property('suffix');
        // expect(instance.suffix).to.be(expectedValueLiteral);
      });

      it('should have the property temperature (base name: "temperature")', function() {
        // TODO: update the code to test the property temperature
        expect(instance).to.have.property('temperature');
        // expect(instance.temperature).to.be(expectedValueLiteral);
      });

      it('should have the property topP (base name: "top_p")', function() {
        // TODO: update the code to test the property topP
        expect(instance).to.have.property('topP');
        // expect(instance.topP).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
