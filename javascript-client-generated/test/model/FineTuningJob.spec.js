/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FineTuningJob', function() {
      beforeEach(function() {
        instance = new OpenAiApi.FineTuningJob();
      });

      it('should create an instance of FineTuningJob', function() {
        // TODO: update the code to test FineTuningJob
        expect(instance).to.be.a(OpenAiApi.FineTuningJob);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

      it('should have the property fineTunedModel (base name: "fine_tuned_model")', function() {
        // TODO: update the code to test the property fineTunedModel
        expect(instance).to.have.property('fineTunedModel');
        // expect(instance.fineTunedModel).to.be(expectedValueLiteral);
      });

      it('should have the property finishedAt (base name: "finished_at")', function() {
        // TODO: update the code to test the property finishedAt
        expect(instance).to.have.property('finishedAt');
        // expect(instance.finishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property hyperparameters (base name: "hyperparameters")', function() {
        // TODO: update the code to test the property hyperparameters
        expect(instance).to.have.property('hyperparameters');
        // expect(instance.hyperparameters).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property _object (base name: "object")', function() {
        // TODO: update the code to test the property _object
        expect(instance).to.have.property('_object');
        // expect(instance._object).to.be(expectedValueLiteral);
      });

      it('should have the property organizationId (base name: "organization_id")', function() {
        // TODO: update the code to test the property organizationId
        expect(instance).to.have.property('organizationId');
        // expect(instance.organizationId).to.be(expectedValueLiteral);
      });

      it('should have the property resultFiles (base name: "result_files")', function() {
        // TODO: update the code to test the property resultFiles
        expect(instance).to.have.property('resultFiles');
        // expect(instance.resultFiles).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property trainedTokens (base name: "trained_tokens")', function() {
        // TODO: update the code to test the property trainedTokens
        expect(instance).to.have.property('trainedTokens');
        // expect(instance.trainedTokens).to.be(expectedValueLiteral);
      });

      it('should have the property trainingFile (base name: "training_file")', function() {
        // TODO: update the code to test the property trainingFile
        expect(instance).to.have.property('trainingFile');
        // expect(instance.trainingFile).to.be(expectedValueLiteral);
      });

      it('should have the property validationFile (base name: "validation_file")', function() {
        // TODO: update the code to test the property validationFile
        expect(instance).to.have.property('validationFile');
        // expect(instance.validationFile).to.be(expectedValueLiteral);
      });

    });
  });

}));
