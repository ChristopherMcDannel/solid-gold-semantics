/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiApi);
  }
}(this, function(expect, OpenAiApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateModerationResponseCategories', function() {
      beforeEach(function() {
        instance = new OpenAiApi.CreateModerationResponseCategories();
      });

      it('should create an instance of CreateModerationResponseCategories', function() {
        // TODO: update the code to test CreateModerationResponseCategories
        expect(instance).to.be.a(OpenAiApi.CreateModerationResponseCategories);
      });

      it('should have the property hate (base name: "hate")', function() {
        // TODO: update the code to test the property hate
        expect(instance).to.have.property('hate');
        // expect(instance.hate).to.be(expectedValueLiteral);
      });

      it('should have the property hatethreatening (base name: "hate/threatening")', function() {
        // TODO: update the code to test the property hatethreatening
        expect(instance).to.have.property('hatethreatening');
        // expect(instance.hatethreatening).to.be(expectedValueLiteral);
      });

      it('should have the property harassment (base name: "harassment")', function() {
        // TODO: update the code to test the property harassment
        expect(instance).to.have.property('harassment');
        // expect(instance.harassment).to.be(expectedValueLiteral);
      });

      it('should have the property harassmentthreatening (base name: "harassment/threatening")', function() {
        // TODO: update the code to test the property harassmentthreatening
        expect(instance).to.have.property('harassmentthreatening');
        // expect(instance.harassmentthreatening).to.be(expectedValueLiteral);
      });

      it('should have the property selfHarm (base name: "self-harm")', function() {
        // TODO: update the code to test the property selfHarm
        expect(instance).to.have.property('selfHarm');
        // expect(instance.selfHarm).to.be(expectedValueLiteral);
      });

      it('should have the property selfHarmintent (base name: "self-harm/intent")', function() {
        // TODO: update the code to test the property selfHarmintent
        expect(instance).to.have.property('selfHarmintent');
        // expect(instance.selfHarmintent).to.be(expectedValueLiteral);
      });

      it('should have the property selfHarminstructions (base name: "self-harm/instructions")', function() {
        // TODO: update the code to test the property selfHarminstructions
        expect(instance).to.have.property('selfHarminstructions');
        // expect(instance.selfHarminstructions).to.be(expectedValueLiteral);
      });

      it('should have the property sexual (base name: "sexual")', function() {
        // TODO: update the code to test the property sexual
        expect(instance).to.have.property('sexual');
        // expect(instance.sexual).to.be(expectedValueLiteral);
      });

      it('should have the property sexualminors (base name: "sexual/minors")', function() {
        // TODO: update the code to test the property sexualminors
        expect(instance).to.have.property('sexualminors');
        // expect(instance.sexualminors).to.be(expectedValueLiteral);
      });

      it('should have the property violence (base name: "violence")', function() {
        // TODO: update the code to test the property violence
        expect(instance).to.have.property('violence');
        // expect(instance.violence).to.be(expectedValueLiteral);
      });

      it('should have the property violencegraphic (base name: "violence/graphic")', function() {
        // TODO: update the code to test the property violencegraphic
        expect(instance).to.have.property('violencegraphic');
        // expect(instance.violencegraphic).to.be(expectedValueLiteral);
      });

    });
  });

}));
