/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DeleteModelResponse} from '../model/DeleteModelResponse';
import {ListModelsResponse} from '../model/ListModelsResponse';
import {Model} from '../model/Model';

/**
* Models service.
* @module api/ModelsApi
* @version 2.0.0
*/
export class ModelsApi {

    /**
    * Constructs a new ModelsApi. 
    * @alias module:api/ModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback moduleapi/ModelsApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteModelResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * @param {String} model The model to delete
     * @param {module:api/ModelsApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteModel(model, callback) {
      
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling deleteModel");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteModelResponse;

      return this.apiClient.callApi(
        '/models/{model}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listModels operation.
     * @callback moduleapi/ModelsApi~listModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * @param {module:api/ModelsApi~listModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listModels(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListModelsResponse;

      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the retrieveModel operation.
     * @callback moduleapi/ModelsApi~retrieveModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * @param {String} model The ID of the model to use for this request
     * @param {module:api/ModelsApi~retrieveModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    retrieveModel(model, callback) {
      
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling retrieveModel");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;

      return this.apiClient.callApi(
        '/models/{model}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}