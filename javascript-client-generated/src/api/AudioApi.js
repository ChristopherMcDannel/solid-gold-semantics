/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateSpeechRequest} from '../model/CreateSpeechRequest';
import {CreateTranscriptionResponse} from '../model/CreateTranscriptionResponse';
import {CreateTranslationResponse} from '../model/CreateTranslationResponse';

/**
* Audio service.
* @module api/AudioApi
* @version 2.0.0
*/
export class AudioApi {

    /**
    * Constructs a new AudioApi. 
    * @alias module:api/AudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createSpeech operation.
     * @callback moduleapi/AudioApi~createSpeechCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates audio from the input text.
     * @param {module:model/CreateSpeechRequest} body 
     * @param {module:api/AudioApi~createSpeechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSpeech(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSpeech");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/audio/speech', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTranscription operation.
     * @callback moduleapi/AudioApi~createTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranscriptionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transcribes audio into the input language.
     * @param {Blob} file 
     * @param {Object} model 
     * @param {String} language 
     * @param {String} prompt 
     * @param {module:model/String} responseFormat 
     * @param {Number} temperature 
     * @param {module:api/AudioApi~createTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTranscription(file, model, language, prompt, responseFormat, temperature, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranscription");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranscription");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createTranscription");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling createTranscription");
      }
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling createTranscription");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling createTranscription");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file,'model': model,'language': language,'prompt': prompt,'response_format': responseFormat,'temperature': temperature
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranscriptionResponse;

      return this.apiClient.callApi(
        '/audio/transcriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTranslation operation.
     * @callback moduleapi/AudioApi~createTranslationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTranslationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translates audio into English.
     * @param {Blob} file 
     * @param {Object} model 
     * @param {String} prompt 
     * @param {String} responseFormat 
     * @param {Number} temperature 
     * @param {module:api/AudioApi~createTranslationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTranslation(file, model, prompt, responseFormat, temperature, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createTranslation");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling createTranslation");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling createTranslation");
      }
      // verify the required parameter 'responseFormat' is set
      if (responseFormat === undefined || responseFormat === null) {
        throw new Error("Missing the required parameter 'responseFormat' when calling createTranslation");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling createTranslation");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file,'model': model,'prompt': prompt,'response_format': responseFormat,'temperature': temperature
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateTranslationResponse;

      return this.apiClient.callApi(
        '/audio/translations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}