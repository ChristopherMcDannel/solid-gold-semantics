/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The AssistantObject model module.
 * @module model/AssistantObject
 * @version 2.0.0
 */
export class AssistantObject {
  /**
   * Constructs a new <code>AssistantObject</code>.
   * Represents an &#x60;assistant&#x60; that can call the model and use tools.
   * @alias module:model/AssistantObject
   * @class
   * @param id {String} The identifier, which can be referenced in API endpoints.
   * @param _object {module:model/AssistantObject.ObjectEnum} The object type, which is always `assistant`.
   * @param createdAt {Number} The Unix timestamp (in seconds) for when the assistant was created.
   * @param name {String} The name of the assistant. The maximum length is 256 characters. 
   * @param description {String} The description of the assistant. The maximum length is 512 characters. 
   * @param model {String} ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
   * @param instructions {String} The system instructions that the assistant uses. The maximum length is 32768 characters. 
   * @param tools {Array.<Object>} A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
   * @param fileIds {Array.<String>} A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
   * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  constructor(id, _object, createdAt, name, description, model, instructions, tools, fileIds, metadata) {
    this.id = id;
    this._object = _object;
    this.createdAt = createdAt;
    this.name = name;
    this.description = description;
    this.model = model;
    this.instructions = instructions;
    this.tools = tools;
    this.fileIds = fileIds;
    this.metadata = metadata;
  }

  /**
   * Constructs a <code>AssistantObject</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AssistantObject} obj Optional instance to populate.
   * @return {module:model/AssistantObject} The populated <code>AssistantObject</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AssistantObject();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('object'))
        obj._object = ApiClient.convertToType(data['object'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], 'String');
      if (data.hasOwnProperty('instructions'))
        obj.instructions = ApiClient.convertToType(data['instructions'], 'String');
      if (data.hasOwnProperty('tools'))
        obj.tools = ApiClient.convertToType(data['tools'], [OneOfAssistantObjectToolsItems]);
      if (data.hasOwnProperty('file_ids'))
        obj.fileIds = ApiClient.convertToType(data['file_ids'], ['String']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], Object);
    }
    return obj;
  }
}

/**
 * The identifier, which can be referenced in API endpoints.
 * @member {String} id
 */
AssistantObject.prototype.id = undefined;

/**
 * Allowed values for the <code>_object</code> property.
 * @enum {String}
 * @readonly
 */
AssistantObject.ObjectEnum = {
  /**
   * value: "assistant"
   * @const
   */
  assistant: "assistant"
};
/**
 * The object type, which is always `assistant`.
 * @member {module:model/AssistantObject.ObjectEnum} _object
 */
AssistantObject.prototype._object = undefined;

/**
 * The Unix timestamp (in seconds) for when the assistant was created.
 * @member {Number} createdAt
 */
AssistantObject.prototype.createdAt = undefined;

/**
 * The name of the assistant. The maximum length is 256 characters. 
 * @member {String} name
 */
AssistantObject.prototype.name = undefined;

/**
 * The description of the assistant. The maximum length is 512 characters. 
 * @member {String} description
 */
AssistantObject.prototype.description = undefined;

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 * @member {String} model
 */
AssistantObject.prototype.model = undefined;

/**
 * The system instructions that the assistant uses. The maximum length is 32768 characters. 
 * @member {String} instructions
 */
AssistantObject.prototype.instructions = undefined;

/**
 * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`. 
 * @member {Array.<Object>} tools
 */
AssistantObject.prototype.tools = undefined;

/**
 * A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
 * @member {Array.<String>} fileIds
 */
AssistantObject.prototype.fileIds = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
AssistantObject.prototype.metadata = undefined;

