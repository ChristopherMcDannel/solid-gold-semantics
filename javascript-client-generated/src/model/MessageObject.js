/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The MessageObject model module.
 * @module model/MessageObject
 * @version 2.0.0
 */
export class MessageObject {
  /**
   * Constructs a new <code>MessageObject</code>.
   * Represents a message within a [thread](/docs/api-reference/threads).
   * @alias module:model/MessageObject
   * @class
   * @param id {String} The identifier, which can be referenced in API endpoints.
   * @param _object {module:model/MessageObject.ObjectEnum} The object type, which is always `thread.message`.
   * @param createdAt {Number} The Unix timestamp (in seconds) for when the message was created.
   * @param threadId {String} The [thread](/docs/api-reference/threads) ID that this message belongs to.
   * @param role {module:model/MessageObject.RoleEnum} The entity that produced the message. One of `user` or `assistant`.
   * @param content {Array.<Object>} The content of the message in array of text and/or images.
   * @param assistantId {String} If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
   * @param runId {String} If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
   * @param fileIds {Array.<String>} A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
   * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  constructor(id, _object, createdAt, threadId, role, content, assistantId, runId, fileIds, metadata) {
    this.id = id;
    this._object = _object;
    this.createdAt = createdAt;
    this.threadId = threadId;
    this.role = role;
    this.content = content;
    this.assistantId = assistantId;
    this.runId = runId;
    this.fileIds = fileIds;
    this.metadata = metadata;
  }

  /**
   * Constructs a <code>MessageObject</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MessageObject} obj Optional instance to populate.
   * @return {module:model/MessageObject} The populated <code>MessageObject</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MessageObject();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('object'))
        obj._object = ApiClient.convertToType(data['object'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Number');
      if (data.hasOwnProperty('thread_id'))
        obj.threadId = ApiClient.convertToType(data['thread_id'], 'String');
      if (data.hasOwnProperty('role'))
        obj.role = ApiClient.convertToType(data['role'], 'String');
      if (data.hasOwnProperty('content'))
        obj.content = ApiClient.convertToType(data['content'], [OneOfMessageObjectContentItems]);
      if (data.hasOwnProperty('assistant_id'))
        obj.assistantId = ApiClient.convertToType(data['assistant_id'], 'String');
      if (data.hasOwnProperty('run_id'))
        obj.runId = ApiClient.convertToType(data['run_id'], 'String');
      if (data.hasOwnProperty('file_ids'))
        obj.fileIds = ApiClient.convertToType(data['file_ids'], ['String']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], Object);
    }
    return obj;
  }
}

/**
 * The identifier, which can be referenced in API endpoints.
 * @member {String} id
 */
MessageObject.prototype.id = undefined;

/**
 * Allowed values for the <code>_object</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject.ObjectEnum = {
  /**
   * value: "thread.message"
   * @const
   */
  threadMessage: "thread.message"
};
/**
 * The object type, which is always `thread.message`.
 * @member {module:model/MessageObject.ObjectEnum} _object
 */
MessageObject.prototype._object = undefined;

/**
 * The Unix timestamp (in seconds) for when the message was created.
 * @member {Number} createdAt
 */
MessageObject.prototype.createdAt = undefined;

/**
 * The [thread](/docs/api-reference/threads) ID that this message belongs to.
 * @member {String} threadId
 */
MessageObject.prototype.threadId = undefined;

/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject.RoleEnum = {
  /**
   * value: "user"
   * @const
   */
  user: "user",

  /**
   * value: "assistant"
   * @const
   */
  assistant: "assistant"
};
/**
 * The entity that produced the message. One of `user` or `assistant`.
 * @member {module:model/MessageObject.RoleEnum} role
 */
MessageObject.prototype.role = undefined;

/**
 * The content of the message in array of text and/or images.
 * @member {Array.<Object>} content
 */
MessageObject.prototype.content = undefined;

/**
 * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
 * @member {String} assistantId
 */
MessageObject.prototype.assistantId = undefined;

/**
 * If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
 * @member {String} runId
 */
MessageObject.prototype.runId = undefined;

/**
 * A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
 * @member {Array.<String>} fileIds
 */
MessageObject.prototype.fileIds = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
MessageObject.prototype.metadata = undefined;

