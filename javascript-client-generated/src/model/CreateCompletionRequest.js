/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CreateCompletionRequest model module.
 * @module model/CreateCompletionRequest
 * @version 2.0.0
 */
export class CreateCompletionRequest {
  /**
   * Constructs a new <code>CreateCompletionRequest</code>.
   * @alias module:model/CreateCompletionRequest
   * @class
   * @param model {Object} ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
   * @param prompt {Object} The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
   */
  constructor(model, prompt) {
    this.model = model;
    this.prompt = prompt;
  }

  /**
   * Constructs a <code>CreateCompletionRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateCompletionRequest} obj Optional instance to populate.
   * @return {module:model/CreateCompletionRequest} The populated <code>CreateCompletionRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CreateCompletionRequest();
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], Object);
      if (data.hasOwnProperty('prompt'))
        obj.prompt = ApiClient.convertToType(data['prompt'], Object);
      if (data.hasOwnProperty('best_of'))
        obj.bestOf = ApiClient.convertToType(data['best_of'], 'Number');
      if (data.hasOwnProperty('echo'))
        obj.echo = ApiClient.convertToType(data['echo'], 'Boolean');
      if (data.hasOwnProperty('frequency_penalty'))
        obj.frequencyPenalty = ApiClient.convertToType(data['frequency_penalty'], 'Number');
      if (data.hasOwnProperty('logit_bias'))
        obj.logitBias = ApiClient.convertToType(data['logit_bias'], {'String': 'Number'});
      if (data.hasOwnProperty('logprobs'))
        obj.logprobs = ApiClient.convertToType(data['logprobs'], 'Number');
      if (data.hasOwnProperty('max_tokens'))
        obj.maxTokens = ApiClient.convertToType(data['max_tokens'], 'Number');
      if (data.hasOwnProperty('n'))
        obj.n = ApiClient.convertToType(data['n'], 'Number');
      if (data.hasOwnProperty('presence_penalty'))
        obj.presencePenalty = ApiClient.convertToType(data['presence_penalty'], 'Number');
      if (data.hasOwnProperty('seed'))
        obj.seed = ApiClient.convertToType(data['seed'], 'Number');
      if (data.hasOwnProperty('stop'))
        obj.stop = ApiClient.convertToType(data['stop'], Object);
      if (data.hasOwnProperty('stream'))
        obj.stream = ApiClient.convertToType(data['stream'], 'Boolean');
      if (data.hasOwnProperty('suffix'))
        obj.suffix = ApiClient.convertToType(data['suffix'], 'String');
      if (data.hasOwnProperty('temperature'))
        obj.temperature = ApiClient.convertToType(data['temperature'], 'Number');
      if (data.hasOwnProperty('top_p'))
        obj.topP = ApiClient.convertToType(data['top_p'], 'Number');
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], 'String');
    }
    return obj;
  }
}

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. 
 * @member {Object} model
 */
CreateCompletionRequest.prototype.model = undefined;

/**
 * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. 
 * @member {Object} prompt
 */
CreateCompletionRequest.prototype.prompt = undefined;

/**
 * Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
 * @member {Number} bestOf
 * @default 1
 */
CreateCompletionRequest.prototype.bestOf = 1;

/**
 * Echo back the prompt in addition to the completion 
 * @member {Boolean} echo
 * @default false
 */
CreateCompletionRequest.prototype.echo = false;

/**
 * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details) 
 * @member {Number} frequencyPenalty
 * @default 0
 */
CreateCompletionRequest.prototype.frequencyPenalty = 0;

/**
 * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
 * @member {Object.<String, Number>} logitBias
 */
CreateCompletionRequest.prototype.logitBias = undefined;

/**
 * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 
 * @member {Number} logprobs
 */
CreateCompletionRequest.prototype.logprobs = undefined;

/**
 * The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
 * @member {Number} maxTokens
 * @default 16
 */
CreateCompletionRequest.prototype.maxTokens = 16;

/**
 * How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
 * @member {Number} n
 * @default 1
 */
CreateCompletionRequest.prototype.n = 1;

/**
 * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details) 
 * @member {Number} presencePenalty
 * @default 0
 */
CreateCompletionRequest.prototype.presencePenalty = 0;

/**
 * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend. 
 * @member {Number} seed
 */
CreateCompletionRequest.prototype.seed = undefined;

/**
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
 * @member {Object} stop
 */
CreateCompletionRequest.prototype.stop = undefined;

/**
 * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
 * @member {Boolean} stream
 * @default false
 */
CreateCompletionRequest.prototype.stream = false;

/**
 * The suffix that comes after a completion of inserted text.
 * @member {String} suffix
 */
CreateCompletionRequest.prototype.suffix = undefined;

/**
 * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
 * @member {Number} temperature
 * @default 1
 */
CreateCompletionRequest.prototype.temperature = 1;

/**
 * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
 * @member {Number} topP
 * @default 1
 */
CreateCompletionRequest.prototype.topP = 1;

/**
 * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @member {String} user
 */
CreateCompletionRequest.prototype.user = undefined;

