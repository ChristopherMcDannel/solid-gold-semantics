/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CreateEditRequest model module.
 * @module model/CreateEditRequest
 * @version 2.0.0
 */
export class CreateEditRequest {
  /**
   * Constructs a new <code>CreateEditRequest</code>.
   * @alias module:model/CreateEditRequest
   * @class
   * @param instruction {String} The instruction that tells the model how to edit the prompt.
   * @param model {Object} ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
   */
  constructor(instruction, model) {
    this.instruction = instruction;
    this.model = model;
  }

  /**
   * Constructs a <code>CreateEditRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateEditRequest} obj Optional instance to populate.
   * @return {module:model/CreateEditRequest} The populated <code>CreateEditRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CreateEditRequest();
      if (data.hasOwnProperty('instruction'))
        obj.instruction = ApiClient.convertToType(data['instruction'], 'String');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], Object);
      if (data.hasOwnProperty('input'))
        obj.input = ApiClient.convertToType(data['input'], 'String');
      if (data.hasOwnProperty('n'))
        obj.n = ApiClient.convertToType(data['n'], 'Number');
      if (data.hasOwnProperty('temperature'))
        obj.temperature = ApiClient.convertToType(data['temperature'], 'Number');
      if (data.hasOwnProperty('top_p'))
        obj.topP = ApiClient.convertToType(data['top_p'], 'Number');
    }
    return obj;
  }
}

/**
 * The instruction that tells the model how to edit the prompt.
 * @member {String} instruction
 */
CreateEditRequest.prototype.instruction = undefined;

/**
 * ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
 * @member {Object} model
 */
CreateEditRequest.prototype.model = undefined;

/**
 * The input text to use as a starting point for the edit.
 * @member {String} input
 * @default ''
 */
CreateEditRequest.prototype.input = '';

/**
 * How many edits to generate for the input and instruction.
 * @member {Number} n
 * @default 1
 */
CreateEditRequest.prototype.n = 1;

/**
 * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
 * @member {Number} temperature
 * @default 1
 */
CreateEditRequest.prototype.temperature = 1;

/**
 * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
 * @member {Number} topP
 * @default 1
 */
CreateEditRequest.prototype.topP = 1;

