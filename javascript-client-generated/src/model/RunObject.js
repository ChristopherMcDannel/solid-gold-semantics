/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {RunObjectLastError} from './RunObjectLastError';
import {RunObjectRequiredAction} from './RunObjectRequiredAction';

/**
 * The RunObject model module.
 * @module model/RunObject
 * @version 2.0.0
 */
export class RunObject {
  /**
   * Constructs a new <code>RunObject</code>.
   * Represents an execution run on a [thread](/docs/api-reference/threads).
   * @alias module:model/RunObject
   * @class
   * @param id {String} The identifier, which can be referenced in API endpoints.
   * @param _object {module:model/RunObject.ObjectEnum} The object type, which is always `assistant.run`.
   * @param createdAt {Number} The Unix timestamp (in seconds) for when the run was created.
   * @param threadId {String} The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
   * @param assistantId {String} The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
   * @param status {module:model/RunObject.StatusEnum} The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
   * @param requiredAction {module:model/RunObjectRequiredAction} 
   * @param lastError {module:model/RunObjectLastError} 
   * @param expiresAt {Number} The Unix timestamp (in seconds) for when the run will expire.
   * @param startedAt {Number} The Unix timestamp (in seconds) for when the run was started.
   * @param cancelledAt {Number} The Unix timestamp (in seconds) for when the run was cancelled.
   * @param failedAt {Number} The Unix timestamp (in seconds) for when the run failed.
   * @param completedAt {Number} The Unix timestamp (in seconds) for when the run was completed.
   * @param model {String} The model that the [assistant](/docs/api-reference/assistants) used for this run.
   * @param instructions {String} The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
   * @param tools {Array.<Object>} The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
   * @param fileIds {Array.<String>} The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
   * @param metadata {Object} Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
   */
  constructor(id, _object, createdAt, threadId, assistantId, status, requiredAction, lastError, expiresAt, startedAt, cancelledAt, failedAt, completedAt, model, instructions, tools, fileIds, metadata) {
    this.id = id;
    this._object = _object;
    this.createdAt = createdAt;
    this.threadId = threadId;
    this.assistantId = assistantId;
    this.status = status;
    this.requiredAction = requiredAction;
    this.lastError = lastError;
    this.expiresAt = expiresAt;
    this.startedAt = startedAt;
    this.cancelledAt = cancelledAt;
    this.failedAt = failedAt;
    this.completedAt = completedAt;
    this.model = model;
    this.instructions = instructions;
    this.tools = tools;
    this.fileIds = fileIds;
    this.metadata = metadata;
  }

  /**
   * Constructs a <code>RunObject</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RunObject} obj Optional instance to populate.
   * @return {module:model/RunObject} The populated <code>RunObject</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RunObject();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('object'))
        obj._object = ApiClient.convertToType(data['object'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Number');
      if (data.hasOwnProperty('thread_id'))
        obj.threadId = ApiClient.convertToType(data['thread_id'], 'String');
      if (data.hasOwnProperty('assistant_id'))
        obj.assistantId = ApiClient.convertToType(data['assistant_id'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('required_action'))
        obj.requiredAction = RunObjectRequiredAction.constructFromObject(data['required_action']);
      if (data.hasOwnProperty('last_error'))
        obj.lastError = RunObjectLastError.constructFromObject(data['last_error']);
      if (data.hasOwnProperty('expires_at'))
        obj.expiresAt = ApiClient.convertToType(data['expires_at'], 'Number');
      if (data.hasOwnProperty('started_at'))
        obj.startedAt = ApiClient.convertToType(data['started_at'], 'Number');
      if (data.hasOwnProperty('cancelled_at'))
        obj.cancelledAt = ApiClient.convertToType(data['cancelled_at'], 'Number');
      if (data.hasOwnProperty('failed_at'))
        obj.failedAt = ApiClient.convertToType(data['failed_at'], 'Number');
      if (data.hasOwnProperty('completed_at'))
        obj.completedAt = ApiClient.convertToType(data['completed_at'], 'Number');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], 'String');
      if (data.hasOwnProperty('instructions'))
        obj.instructions = ApiClient.convertToType(data['instructions'], 'String');
      if (data.hasOwnProperty('tools'))
        obj.tools = ApiClient.convertToType(data['tools'], [OneOfRunObjectToolsItems]);
      if (data.hasOwnProperty('file_ids'))
        obj.fileIds = ApiClient.convertToType(data['file_ids'], ['String']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], Object);
    }
    return obj;
  }
}

/**
 * The identifier, which can be referenced in API endpoints.
 * @member {String} id
 */
RunObject.prototype.id = undefined;

/**
 * Allowed values for the <code>_object</code> property.
 * @enum {String}
 * @readonly
 */
RunObject.ObjectEnum = {
  /**
   * value: "assistant.run"
   * @const
   */
  assistantRun: "assistant.run"
};
/**
 * The object type, which is always `assistant.run`.
 * @member {module:model/RunObject.ObjectEnum} _object
 */
RunObject.prototype._object = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was created.
 * @member {Number} createdAt
 */
RunObject.prototype.createdAt = undefined;

/**
 * The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
 * @member {String} threadId
 */
RunObject.prototype.threadId = undefined;

/**
 * The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
 * @member {String} assistantId
 */
RunObject.prototype.assistantId = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RunObject.StatusEnum = {
  /**
   * value: "queued"
   * @const
   */
  queued: "queued",

  /**
   * value: "in_progress"
   * @const
   */
  inProgress: "in_progress",

  /**
   * value: "requires_action"
   * @const
   */
  requiresAction: "requires_action",

  /**
   * value: "cancelling"
   * @const
   */
  cancelling: "cancelling",

  /**
   * value: "cancelled"
   * @const
   */
  cancelled: "cancelled",

  /**
   * value: "failed"
   * @const
   */
  failed: "failed",

  /**
   * value: "completed"
   * @const
   */
  completed: "completed",

  /**
   * value: "expired"
   * @const
   */
  expired: "expired"
};
/**
 * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
 * @member {module:model/RunObject.StatusEnum} status
 */
RunObject.prototype.status = undefined;

/**
 * @member {module:model/RunObjectRequiredAction} requiredAction
 */
RunObject.prototype.requiredAction = undefined;

/**
 * @member {module:model/RunObjectLastError} lastError
 */
RunObject.prototype.lastError = undefined;

/**
 * The Unix timestamp (in seconds) for when the run will expire.
 * @member {Number} expiresAt
 */
RunObject.prototype.expiresAt = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was started.
 * @member {Number} startedAt
 */
RunObject.prototype.startedAt = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was cancelled.
 * @member {Number} cancelledAt
 */
RunObject.prototype.cancelledAt = undefined;

/**
 * The Unix timestamp (in seconds) for when the run failed.
 * @member {Number} failedAt
 */
RunObject.prototype.failedAt = undefined;

/**
 * The Unix timestamp (in seconds) for when the run was completed.
 * @member {Number} completedAt
 */
RunObject.prototype.completedAt = undefined;

/**
 * The model that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {String} model
 */
RunObject.prototype.model = undefined;

/**
 * The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {String} instructions
 */
RunObject.prototype.instructions = undefined;

/**
 * The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {Array.<Object>} tools
 */
RunObject.prototype.tools = undefined;

/**
 * The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
 * @member {Array.<String>} fileIds
 */
RunObject.prototype.fileIds = undefined;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
 * @member {Object} metadata
 */
RunObject.prototype.metadata = undefined;

