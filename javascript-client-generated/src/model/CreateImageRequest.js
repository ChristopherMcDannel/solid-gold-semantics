/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CreateImageRequest model module.
 * @module model/CreateImageRequest
 * @version 2.0.0
 */
export class CreateImageRequest {
  /**
   * Constructs a new <code>CreateImageRequest</code>.
   * @alias module:model/CreateImageRequest
   * @class
   * @param prompt {String} A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
   */
  constructor(prompt) {
    this.prompt = prompt;
  }

  /**
   * Constructs a <code>CreateImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateImageRequest} obj Optional instance to populate.
   * @return {module:model/CreateImageRequest} The populated <code>CreateImageRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CreateImageRequest();
      if (data.hasOwnProperty('prompt'))
        obj.prompt = ApiClient.convertToType(data['prompt'], 'String');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], Object);
      if (data.hasOwnProperty('n'))
        obj.n = ApiClient.convertToType(data['n'], 'Number');
      if (data.hasOwnProperty('quality'))
        obj.quality = ApiClient.convertToType(data['quality'], 'String');
      if (data.hasOwnProperty('response_format'))
        obj.responseFormat = ApiClient.convertToType(data['response_format'], 'String');
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'String');
      if (data.hasOwnProperty('style'))
        obj.style = ApiClient.convertToType(data['style'], 'String');
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], 'String');
    }
    return obj;
  }
}

/**
 * A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
 * @member {String} prompt
 */
CreateImageRequest.prototype.prompt = undefined;

/**
 * The model to use for image generation.
 * @member {Object} model
 */
CreateImageRequest.prototype.model = undefined;

/**
 * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
 * @member {Number} n
 * @default 1
 */
CreateImageRequest.prototype.n = 1;

/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
CreateImageRequest.QualityEnum = {
  /**
   * value: "standard"
   * @const
   */
  standard: "standard",

  /**
   * value: "hd"
   * @const
   */
  hd: "hd"
};
/**
 * The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
 * @member {module:model/CreateImageRequest.QualityEnum} quality
 * @default 'standard'
 */
CreateImageRequest.prototype.quality = 'standard';

/**
 * Allowed values for the <code>responseFormat</code> property.
 * @enum {String}
 * @readonly
 */
CreateImageRequest.ResponseFormatEnum = {
  /**
   * value: "url"
   * @const
   */
  url: "url",

  /**
   * value: "b64_json"
   * @const
   */
  b64Json: "b64_json"
};
/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
 * @member {module:model/CreateImageRequest.ResponseFormatEnum} responseFormat
 * @default 'url'
 */
CreateImageRequest.prototype.responseFormat = 'url';

/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
CreateImageRequest.SizeEnum = {
  /**
   * value: "256x256"
   * @const
   */
  _256x256: "256x256",

  /**
   * value: "512x512"
   * @const
   */
  _512x512: "512x512",

  /**
   * value: "1024x1024"
   * @const
   */
  _1024x1024: "1024x1024",

  /**
   * value: "1792x1024"
   * @const
   */
  _1792x1024: "1792x1024",

  /**
   * value: "1024x1792"
   * @const
   */
  _1024x1792: "1024x1792"
};
/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
 * @member {module:model/CreateImageRequest.SizeEnum} size
 * @default '1024x1024'
 */
CreateImageRequest.prototype.size = '1024x1024';

/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
CreateImageRequest.StyleEnum = {
  /**
   * value: "vivid"
   * @const
   */
  vivid: "vivid",

  /**
   * value: "natural"
   * @const
   */
  natural: "natural"
};
/**
 * The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
 * @member {module:model/CreateImageRequest.StyleEnum} style
 * @default 'vivid'
 */
CreateImageRequest.prototype.style = 'vivid';

/**
 * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
 * @member {String} user
 */
CreateImageRequest.prototype.user = undefined;

