/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CreateTranslationRequest model module.
 * @module model/CreateTranslationRequest
 * @version 2.0.0
 */
export class CreateTranslationRequest {
  /**
   * Constructs a new <code>CreateTranslationRequest</code>.
   * @alias module:model/CreateTranslationRequest
   * @class
   * @param file {Blob} The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
   * @param model {Object} ID of the model to use. Only `whisper-1` is currently available. 
   */
  constructor(file, model) {
    this.file = file;
    this.model = model;
  }

  /**
   * Constructs a <code>CreateTranslationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateTranslationRequest} obj Optional instance to populate.
   * @return {module:model/CreateTranslationRequest} The populated <code>CreateTranslationRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CreateTranslationRequest();
      if (data.hasOwnProperty('file'))
        obj.file = ApiClient.convertToType(data['file'], 'Blob');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], Object);
      if (data.hasOwnProperty('prompt'))
        obj.prompt = ApiClient.convertToType(data['prompt'], 'String');
      if (data.hasOwnProperty('response_format'))
        obj.responseFormat = ApiClient.convertToType(data['response_format'], 'String');
      if (data.hasOwnProperty('temperature'))
        obj.temperature = ApiClient.convertToType(data['temperature'], 'Number');
    }
    return obj;
  }
}

/**
 * The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
 * @member {Blob} file
 */
CreateTranslationRequest.prototype.file = undefined;

/**
 * ID of the model to use. Only `whisper-1` is currently available. 
 * @member {Object} model
 */
CreateTranslationRequest.prototype.model = undefined;

/**
 * An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
 * @member {String} prompt
 */
CreateTranslationRequest.prototype.prompt = undefined;

/**
 * The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
 * @member {String} responseFormat
 * @default 'json'
 */
CreateTranslationRequest.prototype.responseFormat = 'json';

/**
 * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
 * @member {Number} temperature
 * @default 0
 */
CreateTranslationRequest.prototype.temperature = 0;

