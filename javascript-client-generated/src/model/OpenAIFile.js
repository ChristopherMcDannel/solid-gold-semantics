/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The OpenAIFile model module.
 * @module model/OpenAIFile
 * @version 2.0.0
 */
export class OpenAIFile {
  /**
   * Constructs a new <code>OpenAIFile</code>.
   * The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI.
   * @alias module:model/OpenAIFile
   * @class
   * @param id {String} The file identifier, which can be referenced in the API endpoints.
   * @param bytes {Number} The size of the file, in bytes.
   * @param createdAt {Number} The Unix timestamp (in seconds) for when the file was created.
   * @param filename {String} The name of the file.
   * @param _object {module:model/OpenAIFile.ObjectEnum} The object type, which is always `file`.
   * @param purpose {module:model/OpenAIFile.PurposeEnum} The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
   * @param status {module:model/OpenAIFile.StatusEnum} Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
   */
  constructor(id, bytes, createdAt, filename, _object, purpose, status) {
    this.id = id;
    this.bytes = bytes;
    this.createdAt = createdAt;
    this.filename = filename;
    this._object = _object;
    this.purpose = purpose;
    this.status = status;
  }

  /**
   * Constructs a <code>OpenAIFile</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OpenAIFile} obj Optional instance to populate.
   * @return {module:model/OpenAIFile} The populated <code>OpenAIFile</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new OpenAIFile();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('bytes'))
        obj.bytes = ApiClient.convertToType(data['bytes'], 'Number');
      if (data.hasOwnProperty('created_at'))
        obj.createdAt = ApiClient.convertToType(data['created_at'], 'Number');
      if (data.hasOwnProperty('filename'))
        obj.filename = ApiClient.convertToType(data['filename'], 'String');
      if (data.hasOwnProperty('object'))
        obj._object = ApiClient.convertToType(data['object'], 'String');
      if (data.hasOwnProperty('purpose'))
        obj.purpose = ApiClient.convertToType(data['purpose'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('status_details'))
        obj.statusDetails = ApiClient.convertToType(data['status_details'], 'String');
    }
    return obj;
  }
}

/**
 * The file identifier, which can be referenced in the API endpoints.
 * @member {String} id
 */
OpenAIFile.prototype.id = undefined;

/**
 * The size of the file, in bytes.
 * @member {Number} bytes
 */
OpenAIFile.prototype.bytes = undefined;

/**
 * The Unix timestamp (in seconds) for when the file was created.
 * @member {Number} createdAt
 */
OpenAIFile.prototype.createdAt = undefined;

/**
 * The name of the file.
 * @member {String} filename
 */
OpenAIFile.prototype.filename = undefined;

/**
 * Allowed values for the <code>_object</code> property.
 * @enum {String}
 * @readonly
 */
OpenAIFile.ObjectEnum = {
  /**
   * value: "file"
   * @const
   */
  file: "file"
};
/**
 * The object type, which is always `file`.
 * @member {module:model/OpenAIFile.ObjectEnum} _object
 */
OpenAIFile.prototype._object = undefined;

/**
 * Allowed values for the <code>purpose</code> property.
 * @enum {String}
 * @readonly
 */
OpenAIFile.PurposeEnum = {
  /**
   * value: "fine-tune"
   * @const
   */
  fineTune: "fine-tune",

  /**
   * value: "fine-tune-results"
   * @const
   */
  fineTuneResults: "fine-tune-results",

  /**
   * value: "assistants"
   * @const
   */
  assistants: "assistants",

  /**
   * value: "assistants_output"
   * @const
   */
  assistantsOutput: "assistants_output"
};
/**
 * The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
 * @member {module:model/OpenAIFile.PurposeEnum} purpose
 */
OpenAIFile.prototype.purpose = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
OpenAIFile.StatusEnum = {
  /**
   * value: "uploaded"
   * @const
   */
  uploaded: "uploaded",

  /**
   * value: "processed"
   * @const
   */
  processed: "processed",

  /**
   * value: "error"
   * @const
   */
  error: "error"
};
/**
 * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
 * @member {module:model/OpenAIFile.StatusEnum} status
 */
OpenAIFile.prototype.status = undefined;

/**
 * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
 * @member {String} statusDetails
 */
OpenAIFile.prototype.statusDetails = undefined;

